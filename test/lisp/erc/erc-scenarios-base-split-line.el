;;; erc-scenarios-base-split-line.el --- ERC line splitting -*- lexical-binding: t -*-

;; Copyright (C) 2023 Free Software Foundation, Inc.

;; This file is part of GNU Emacs.

;; GNU Emacs is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.

;; GNU Emacs is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

;;; Code:

(require 'ert-x)
(eval-and-compile
  (let ((load-path (cons (ert-resource-directory) load-path)))
    (require 'erc-scenarios-common)))

(ert-deftest erc-scenarios-base-split-line--koi8-r ()
  :tags '(:expensive-test)
  (should (equal erc-split-line-length 440))
  (erc-scenarios-common-with-cleanup
      ((erc-scenarios-common-dialog "base/flood")
       (erc-server-flood-penalty 0.1)
       (dumb-server (erc-d-run "localhost" t 'koi8-r))
       (erc-encoding-coding-alist '(("#koi8" . cyrillic-koi8)))
       (port (process-contact dumb-server :service))
       (expect (erc-d-t-make-expecter)))

    (ert-info ("Connect to server")
      (with-current-buffer (erc :server "127.0.0.1"
                                :port port
                                :nick "tester"
                                :full-name "tester")
        (funcall expect 10 "debug mode")
        (erc-cmd-JOIN "#koi8")))

    (with-current-buffer (erc-d-t-wait-for 8 (get-buffer "#koi8"))
      (funcall expect 10 "–∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å")
      (ert-info ("Message well within `erc-split-line-length'")
        (erc-scenarios-common-say
         (concat
          "–∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"))
        (funcall expect 1 "<tester>")
        (funcall expect -0.1 "<tester>"))

      (ert-info ("Message over `erc-split-line-length'")
        (erc-scenarios-common-say
         (concat
          "–∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –±—É–¥–µ—Ç —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–æ–∫–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –≥–¥–µ"))
        (funcall expect 1 "<tester>")
        (funcall expect 1 "<tester> —Ä–∞–∑—Ä—ã–≤")))

    (with-current-buffer "foonet"
      (erc-cmd-QUIT "")
      (funcall expect 10 "finished"))))

(ert-deftest erc-scenarios-base-split-line--ascii ()
  :tags '(:expensive-test)
  (should (equal erc-split-line-length 440))
  (erc-scenarios-common-with-cleanup
      ((erc-scenarios-common-dialog "base/flood")
       (msg-432 (string-join (make-list 18 "twenty-three characters") " "))
       (erc-server-flood-penalty 0.1)
       (dumb-server (erc-d-run "localhost" t 'ascii))
       (port (process-contact dumb-server :service))
       (expect (erc-d-t-make-expecter)))

    (ert-info ("Connect to server")
      (with-current-buffer (erc :server "127.0.0.1"
                                :port port
                                :nick "tester"
                                :full-name "tester")
        (funcall expect 10 "debug mode")
        (erc-cmd-JOIN "#ascii")))

    (with-current-buffer (erc-d-t-wait-for 8 (get-buffer "#ascii"))
      (ert-info ("Message with spaces fits exactly")
        (funcall expect 10 "Welcome")
        (should (= (length (concat msg-432 " 12345678")) 440))
        (erc-scenarios-common-say (concat msg-432 " 12345678"))
        (funcall expect 1 "<tester>")
        ;; Sent in a single go, hence no second <speaker>.
        (funcall expect -0.1 "<tester>")
        (funcall expect 0.1 "12345678"))

      (ert-info ("Message with spaces too long.")
        (erc-scenarios-common-say (concat msg-432 " 123456789"))
        (funcall expect 1 "<tester>")
        ;; Sent in two passes, split at last word.
        (funcall expect 0.1 "<tester> 123456789"))

      (ert-info ("Message sans spaces fits exactly")
        (erc-scenarios-common-say (make-string 440 ?x))
        (funcall expect 1 "<tester>")
        ;; Sent in a single go, hence no second <speaker>.
        (funcall expect -0.1 "<tester>"))

      (ert-info ("Message sans spaces too long.")
        (erc-scenarios-common-say (concat (make-string 440 ?y) "z"))
        (funcall expect 1 "<tester>")
        ;; Sent in two passes, split at last word.
        (funcall expect 0.1 "<tester> z"))

      (ert-info ("Rejected when escape-hatch set")
        (let ((erc--reject-unbreakable-lines t))
          (should-error
           (erc-scenarios-common-say
            (concat
             "https://mail.example.org/verify?token="
             (string-join (make-list 18 "twenty-three_characters") "_")))))))

    (with-current-buffer "foonet"
      (erc-cmd-QUIT "")
      (funcall expect 10 "finished"))))

(ert-deftest erc-scenarios-base-split-line--utf-8 ()
  :tags '(:expensive-test)
  (unless (> emacs-major-version 27)
    (ert-skip "No emojis in Emacs 27"))

  (should (equal erc-split-line-length 440))
  (erc-scenarios-common-with-cleanup
      ((erc-scenarios-common-dialog "base/flood")
       (msg-432 (string-join (make-list 18 "twenty-three characters") " "))
       (erc-server-flood-penalty 0.1)
       (dumb-server (erc-d-run "localhost" t 'utf-8))
       (port (process-contact dumb-server :service))
       (expect (erc-d-t-make-expecter)))

    (ert-info ("Connect to server")
      (with-current-buffer (erc :server "127.0.0.1"
                                :port port
                                :nick "tester"
                                :full-name "tester")
        (funcall expect 10 "debug mode")
        (erc-cmd-JOIN "#utf-8")))

    (with-current-buffer (erc-d-t-wait-for 8 (get-buffer "#utf-8"))
      (funcall expect 10 "Welcome")

      (ert-info ("Message with spaces over `erc-split-line-length'")
        (erc-scenarios-common-say
         (concat
          "–∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –∫–æ—Ä–æ—á–µ —Ç–µ–ø–µ—Ä—å –µ—Å–ª–∏ –ø–æ —Ä—É—Å—Å–∫–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ —á–µ—Ç–∫–æ –∏–ª–∏ –≤—Å–µ —Ä–∞–≤–Ω–æ"
          " –±—É–¥–µ—Ç —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–æ–∫–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –≥–¥–µ"
          " –±—É–¥–µ—Ç —Ä–∞–∑—Ä—ã–≤ —Å—Ç—Ä–æ–∫–∏ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ –≥–¥–µ"))
        (funcall expect 1 "<tester> –∫–æ—Ä–æ—á–µ")
        (funcall expect 1 "<tester> –≤—Å–µ")
        (funcall expect 1 "<tester> —Ä–∞–∑—Ä—ã–≤")
        (funcall expect 1 "Entirely honour"))

      (ert-info ("Message sans spaces over `erc-split-line-length'")
        (erc-scenarios-common-say
         (concat "Ë©±Ë™™Â§©‰∏ãÂ§ßÂã¢ÔºåÂàÜ‰πÖÂøÖÂêàÔºåÂêà‰πÖÂøÖÂàÜÔºöÂë®Êú´‰∏ÉÂúãÂàÜÁà≠ÔºåÂπ∂ÂÖ•ÊñºÁß¶„ÄÇ"
                 "ÂèäÁß¶ÊªÖ‰πãÂæåÔºåÊ•ö„ÄÅÊº¢ÂàÜÁà≠ÔºåÂèàÂπ∂ÂÖ•ÊñºÊº¢„ÄÇÊº¢ÊúùËá™È´òÁ•ñÊñ¨ÁôΩËõáËÄåËµ∑Áæ©Ôºå"
                 "‰∏ÄÁµ±Â§©‰∏ã„ÄÇÂæå‰æÜÂÖâÊ≠¶‰∏≠ËààÔºåÂÇ≥Ëá≥ÁçªÂ∏ùÔºåÈÅÇÂàÜÁÇ∫‰∏âÂúã„ÄÇÊé®ÂÖ∂Ëá¥‰∫Ç‰πãÁî±Ôºå"
                 "ÊÆÜÂßãÊñºÊ°ì„ÄÅÈùà‰∫åÂ∏ù„ÄÇÊ°ìÂ∏ùÁ¶ÅÈåÆÂñÑÈ°ûÔºåÂ¥á‰ø°ÂÆ¶ÂÆò„ÄÇÂèäÊ°ìÂ∏ùÂ¥©ÔºåÈùàÂ∏ùÂç≥‰ΩçÔºå"
                 "Â§ßÂ∞áËªçÁ´áÊ≠¶„ÄÅÂ§™ÂÇÖÈô≥ËïÉÔºåÂÖ±Áõ∏Ëºî‰Ωê„ÄÇÊôÇÊúâÂÆ¶ÂÆòÊõπÁØÄÁ≠âÂºÑÊ¨äÔºåÁ´áÊ≠¶„ÄÅÈô≥ËïÉË¨ÄË™Ö‰πãÔºå"
                 "‰Ωú‰∫ã‰∏çÂØÜÔºåÂèçÁÇ∫ÊâÄÂÆ≥„ÄÇ‰∏≠Ê∂ìËá™Ê≠§ÊÑàÊ©´"))
        (funcall expect 1 "<tester>")
        ;; Sent in two passes, split at last word.
        (funcall expect 0.1 "<tester> Á´áÊ≠¶")
        (funcall expect 1 "this prey out"))

      ;; Combining emojis are respected.
      (ert-info ("Message sans spaces over small `erc-split-line-length'")
        (let ((erc-split-line-length 100))
          (erc-scenarios-common-say
           "–±—É–¥–µ—Ç¬†—Ä–∞–∑—Ä—ã–≤¬†—Å—Ç—Ä–æ–∫–∏¬†–Ω–µ–ø–æ–Ω—è—Ç–Ω–æ¬†–≥–¥–µüèÅüö©üéåüè¥üè≥Ô∏èüè≥Ô∏è‚Äçüåàüè≥Ô∏è‚Äç‚ößÔ∏èüè¥‚Äç‚ò†Ô∏è"))
        (funcall expect 1 "<tester>")
        (funcall expect 1 "<tester> üè≥Ô∏è‚Äçüåà")))

    (with-current-buffer "foonet"
      (erc-cmd-QUIT "")
      (funcall expect 10 "finished"))))

;;; erc-scenarios-base-split-line.el ends here
