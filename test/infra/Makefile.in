### @configure_input@

# Copyright (C) 2021-2024 Free Software Foundation, Inc.

# This file is part of GNU Emacs.

# GNU Emacs is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# GNU Emacs is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <https://www.gnu.org/licenses/>.

### Commentary:

## Generate the test-jobs.yml file for emba.

### Code:

SHELL = @SHELL@

top_builddir = @top_builddir@

-include ${top_builddir}/src/verbose.mk

## Get the tests for only a specific directory.
SUBDIRS ?= $(shell make -s -C .. subdirs)
SUBDIR_TARGETS =
FILE = test-jobs.yml
tn = $$$${test_name}
cps = $$$$CI_PIPELINE_SOURCE

define subdir_template
  $(eval target = check-$(subst /,-,$(1)))
  SUBDIR_TARGETS += $(target)

  $(eval
    ifeq ($(findstring lib-src, $(1)), lib-src)
    define changes
	@echo '        - $(1)/*.{h,c}' >>$(FILE)
    endef
    else ifeq ($(findstring src, $(1)), src)
    define changes
	@echo '        - $(1)/treesit.{h,c}' >>$(FILE)
	@echo '        - test/$(1)/treesit-tests.el' >>$(FILE)
	@echo '      when: never' >>$(FILE)
	@echo '    - changes:' >>$(FILE)
	@echo '        - $(1)/*.{h,c}' >>$(FILE)
    endef
    else ifeq ($(findstring eieio, $(1)), eieio)
    define changes
	@echo '        - lisp/emacs-lisp/eieio*.el' >>$(FILE)
    endef
    else ifeq ($(findstring faceup, $(1)), faceup)
    define changes
	@echo '        - lisp/emacs-lisp/faceup*.el' >>$(FILE)
    endef
    else ifeq ($(findstring progmodes, $(1)), progmodes)
    define changes
	@echo '        - $(1)/eglot.el' >>$(FILE)
	@echo '        - $(1)/*-ts-mode.el' >>$(FILE)
	@echo '        - test/$(1)/eglot-tests.el' >>$(FILE)
	@echo '        - test/$(1)/*-ts-mode-resources/**' >>$(FILE)
	@echo '        - test/$(1)/*-ts-mode-tests.el' >>$(FILE)
	@echo '      when: never' >>$(FILE)
	@echo '    - changes:' >>$(FILE)
	@echo '        - $(1)/*.el' >>$(FILE)
    endef
    else ifeq ($(findstring so-long, $(1)), so-long)
    define changes
	@echo '        - lisp/so-long*.el' >>$(FILE)
    endef
    else ifeq ($(findstring misc, $(1)), misc)
    define changes
	@echo '        - admin/*.el' >>$(FILE)
    endef
    else
    define changes
	@echo '        - $(1)/*.el' >>$(FILE)
    endef
    endif)

  $(target):
	@echo >>$(FILE)
	@echo 'test-$(subst /,-,$(1))-inotify:' >>$(FILE)
	@echo '  stage: normal' >>$(FILE)
	@echo '  extends: [.job-template, .test-template]' >>$(FILE)
	@echo '  needs:' >>$(FILE)
	@echo '    - job: build-image-inotify' >>$(FILE)
	@echo '      optional: true' >>$(FILE)
	@echo '  rules:' >>$(FILE)
	@echo "    - if: '"'${cps} == "schedule"'"'" >>$(FILE)
	@echo '      when: never' >>$(FILE)
	@echo '    - changes:' >>$(FILE)
	$(changes)
	@echo '        - test/$(1)/*resources/**' >>$(FILE)
	@echo '        - test/$(1)/*.el' >>$(FILE)
	@echo '  variables:' >>$(FILE)
	@echo '    target: emacs-inotify' >>$(FILE)
	@echo '    make_params: "-k -C test $(target)"' >>$(FILE)
endef

$(foreach subdir, $(SUBDIRS), $(eval $(call subdir_template,$(subdir))))

TREE-SITTER-FILES ?= $(shell cd .. ; \
  find lisp src \( -name "*-ts-mode-tests.el" -o -name "treesit-tests.el" \) | \
  sort | sed s/\\.el/.log/)

all: generate-test-jobs

.PHONY: generate-test-jobs $(FILE) $(SUBDIR_TARGETS) tree-sitter-files-template

generate-test-jobs: $(FILE) $(SUBDIR_TARGETS) tree-sitter-files-template

tree-sitter-files-template:
	@echo >>$(FILE)
	@echo '.tree-sitter-files-template:' >>$(FILE)
	@echo '  variables:' >>$(FILE)
	@echo '    tree_sitter_files: >-' >>$(FILE)
	@for name in $(TREE-SITTER-FILES) ; do echo "      $${name}" >>$(FILE) ; done

$(FILE):
	$(AM_V_GEN)
	@echo "# Generated by \"make generate-test-jobs\", don't edit." >$(FILE)
